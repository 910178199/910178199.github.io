<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[多进程]]></title>
      <url>%2F2016%2F12%2F15%2F%E5%A4%9A%E8%BF%9B%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[————-方式一 —————-fork():普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。 子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。123456789101112print('Process (%s) start...' % os.getpid())#fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程）# ，然后，分别在父进程和子进程内返回。pid = os.fork()print(pid)if pid == 0: #pid代表子线程，ppid代表父线程 print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))else: print('I (%s) just created a child process (%s).' % (os.getpid(), pid)) multiprocessing模块提供了一个Process类来代表一个进程对象 ————-方式二—————-1234567891011121314151617#multiprocessing模块提供了一个Process类来代表一个进程对象#子线程执行代码def run_process(name): print('chile process ...',name,os.getpid())if __name__=='__main__': print('parent ...',os.getpid())#创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，# 用start()方法启动，这样创建进程比fork()还要简单。# join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。 p = Process(target=run_process,args=('test',)) print('chile process start') p.start() p.join() print('chile process end') ————-方式三—————-12345678910111213141516171819202122#线程池#pool如果要启动大量的子进程，可以用进程池的方式批量创建子进程：from multiprocessing import Poolimport os, time, randomdef long_time_task(name): print('Run task %s (%s)...' % (name, os.getpid())) start = time.time() time.sleep(random.random() * 3) end = time.time() print('Task %s runs %0.2f seconds.' % (name, (end - start)))if __name__=='__main__': print('Parent process %s.' % os.getpid()) p = Pool(8) for i in range(9): p.apply_async(long_time_task, args=(i,)) print('Waiting for all subprocesses done...') p.close() p.join() print('All subprocesses done.') ————-子进程—————-很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。 subprocess模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。12345678910111213141516171819import subprocessprint('$ nslookup www.python.org')r = subprocess.call(['nslookup', 'www.python.org'])print('Exit code:', r)print('$ nslookup')p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)output, err = p.communicate(b'set q=mx\npython.org\nexit\n')print(output.decode('utf-8'))print('Exit code:', p.returncode)#上面的代码相当于在命令行执行命令nslookup，然后手动输入：# set q=mx# python.org# exit 进程间通信Process之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据。进程间通信 Process之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据。 我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：123456789101112131415161718192021222324252627282930313233343536373839404142from multiprocessing import Process, Queueimport os, time, random# 写数据进程执行的代码:def write(q): print('Process to write: %s' % os.getpid()) for value in ['A', 'B', 'C']: print('Put %s to queue...' % value) q.put(value) time.sleep(random.random())# 读数据进程执行的代码:def read(q): print('Process to read: %s' % os.getpid()) while True: value = q.get(True) print('Get %s from queue.' % value)if __name__=='__main__': # 父进程创建Queue，并传给各个子进程： q = Queue() pw = Process(target=write, args=(q,)) pr = Process(target=read, args=(q,)) # 启动子进程pw，写入: pw.start() # 启动子进程pr，读取: pr.start() # 等待pw结束: pw.join() # pr进程里是死循环，无法等待其结束，只能强行终止: pr.terminate()运行结果如下：Process to write: 50563Put A to queue...Process to read: 50564Get A from queue.Put B to queue...Get B from queue.Put C to queue...Get C from queue. 在Unix/Linux下，multiprocessing模块封装了fork()调用，使我们不需要关注fork()的细节。由于Windows没有fork调用，因此，multiprocessing需要“模拟”出fork的效果，父进程所有Python对象都必须通过pickle序列化再传到子进程去，所有，如果multiprocessing在Windows下调用失败了，要先考虑是不是pickle失败了。 小结在Unix/Linux下，可以使用fork()调用实现多进程。 要实现跨平台的多进程，可以使用multiprocessing模块。 进程间通信是通过Queue、Pipes等实现的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[序列化]]></title>
      <url>%2F2016%2F12%2F15%2F%E5%BA%8F%E5%88%97%E5%8C%96%2F</url>
      <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243# -*- coding=utf-8 -*-'序列化packling,反序列化unpackling''使用pickle模块实现'import pickleimport jsond = dict(name='name')#序列化到文件with open('pickle.txt','wb') as f : pickle.dump(d,f)#反序列化with open('pickle.txt','rb') as f: print(pickle.load(f))#序列化对象p = pickle.dumps(d)print(p)#反序列化p2 = pickle.loads(p)print(p2)#python转换为jsonD = dict(name='name',age='19',score = '100')#转换为jsonj = json.dumps(D)print(j)#转换为python对象j2 = json.loads(j)print(j2)#将json写入到文件with open('json.txt','w') as f: json.dump(D,f)#从文件中读取回python对象with open('json.txt','r') as f: print(json.load(f)) JSON进阶1234567891011121314151617181920212223242526272829303132class Student(object): def __init__(self,name,age,score): self.name = name self.age = age self.score = scores = Student('name',1,100)#json无法直接序列化class，报错# print(json.dumps(s))#简便方法：把任意class的实例变为dictprint(json.dumps(s,default=lambda obj:obj.__dict__))#可选参数default就是把任意一个对象变成一个可序列为JSON的对象def student2dict(stu): return &#123; 'name':stu.name ,'age':stu.age ,'score':stu.score &#125;s = json.dumps(s,default=student2dict)print(s)print('json',json.loads(s))#传入的object_hook函数负责把dict转换为Student实例：def dict2student(d): return Student(d['name'], d['age'], d['score'])json_str = '&#123;"age": 20, "score": 88, "name": "Bob"&#125;'print(json.loads(json_str, object_hook=dict2student)) 小结Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。 json模块的dumps()和loads()函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[操作文件和目录]]></title>
      <url>%2F2016%2F12%2F15%2F%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%2F</url>
      <content type="text"><![CDATA[‘操作文件和目录’12345678910111213141516171819202122import os#操作系统类型print(os.name)#详细的系统信息print(os.uname())#获取环境变量print(os.environ)#获取指定的环境变量print(os.environ.get('PATH'))print(os.environ.get('x','default'))#操作文件和目录#绝对路径print(os.path.abspath('.'))#在某个目录下创建一个新目录,把完整路径表示出来print(os.path.join('/Users/black/PythonProjects/Hello2','osCreate'))#创建# os.mkdir('/Users/black/PythonProjects/Hello2/osCreate')#删除os.rmdir('/Users/black/PythonProjects/Hello2/osCreate') 把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：12345&gt;&gt;&gt; os.path.split('/Users/michael/testdir/file.txt')('/Users/michael/testdir', 'file.txt')#列出当前目录的所有文件l = [x for x in os.listdir('.') if os.path.isdir(x)]print(l) 列出所有py文件12l2 = [x for x in os.listdir(&apos;.&apos;) if os.path.isfile(x) and os.path.splitext(x)[1]==&apos;.py&apos;]print(l2) 在目录下查找指定字符串123456789def enterdir(path,word): for x in os.listdir(path): subpath=os.path.join(os.path.abspath(path),x) if os.path.isdir(subpath): enterdir(subpath,word) else: if word in x: print(subpath)enterdir('/Users/black/PythonProjects/Hello2','debugging')]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[StringIO和BytesIO]]></title>
      <url>%2F2016%2F12%2F15%2FStringIO%E5%92%8CBytesIO%2F</url>
      <content type="text"><![CDATA[StringIO很多时候，数据读写不一定是文件，也可以在内存中读写。 StringIO顾名思义就是在内存中读写str。 要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：12345678910&gt;&gt;&gt; from io import StringIO&gt;&gt;&gt; f = StringIO()&gt;&gt;&gt; f.write('hello')5&gt;&gt;&gt; f.write(' ')1&gt;&gt;&gt; f.write('world!')6&gt;&gt;&gt; print(f.getvalue())hello world! getvalue()方法用于获得写入后的str。 BytesIOStringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。 BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：123456&gt;&gt;&gt; from io import BytesIO&gt;&gt;&gt; f = BytesIO()&gt;&gt;&gt; f.write('中文'.encode('utf-8'))6&gt;&gt;&gt; print(f.getvalue())b'\xe4\xb8\xad\xe6\x96\x87' 请注意，写入的不是str，而是经过UTF-8编码的bytes。 和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：1234&gt;&gt;&gt; from io import BytesIO&gt;&gt;&gt; f = BytesIO(b'\xe4\xb8\xad\xe6\x96\x87')&gt;&gt;&gt; f.read()b'\xe4\xb8\xad\xe6\x96\x87' 小结StringIO和BytesIO是在内存中操作str和bytes的方法，使得和读写文件具有一致的接口。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IO操作]]></title>
      <url>%2F2016%2F12%2F15%2FIO%E6%93%8D%E4%BD%9C%2F</url>
      <content type="text"><![CDATA[由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用... finally```来实现：1234567```pythontry: f = open(&apos;/path/to/file&apos;, &apos;r&apos;) print(f.read())finally: if f: f.close() 但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：12with open('/path/to/file', 'r') as f: print(f.read()) 这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。 调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。 如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：12for line in f.readlines(): print(line.strip()) # 把末尾的'\n'删掉 二进制文件前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可：123&gt;&gt;&gt; f = open('/Users/michael/test.jpg', 'rb')&gt;&gt;&gt; f.read()b'\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...' # 十六进制表示的字节 字符编码要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：12&gt;&gt;&gt; f = open('/Users/michael/gbk.txt', 'r', encoding='gbk')&gt;&gt;&gt; f.read() ‘测试’遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：1&gt;&gt;&gt; f = open('/Users/michael/gbk.txt', 'r', encoding='gbk', errors='ignore') 写文件写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件：123&gt;&gt;&gt; f = open('/Users/michael/test.txt', 'w')&gt;&gt;&gt; f.write('Hello, world!')&gt;&gt;&gt; f.close() 你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：12with open('/Users/michael/test.txt', 'w') as f: f.write('Hello, world!') 要写入特定编码的文本文件，请给open()函数传入encoding参数，将字符串自动转换成指定编码。 小结在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[调试]]></title>
      <url>%2F2016%2F12%2F15%2F%E8%B0%83%E8%AF%95%2F</url>
      <content type="text"><![CDATA[1.断言（assert）：def foo(s): n = int(s) assert n != 0, ‘n is zero!’ return 10 / n def main(): foo(‘0’)assert的意思是，表达式n != 0应该是True，否则，根据程序运行的逻辑，后面的代码肯定会出错。 如果断言失败，assert语句本身就会抛出AssertionError 2.日志: logging和assert比，logging不会抛出错误，而且可以输出到文件123456789101112131415import logging#添加处理等级logging.basicConfig(level=logging.INFO)s = '0'n = int(s)logging.info('n = %d'% n)print(10/n)处理结果：$ python3 err.pyINFO:root:n = 0Traceback (most recent call last): File "err.py", line 8, in &lt;module&gt; print(10 / n)ZeroDivisionError: division by zero 这就是logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。同理，指定level=WARNING后，debug和info就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。 logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[错误处理]]></title>
      <url>%2F2016%2F12%2F15%2F%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%2F</url>
      <content type="text"><![CDATA[1234567891011121314try...except...finally...的错误处理机制，Python也不例外。抛出错误 raise# err_raise.pyclass FooError(ValueError): passdef foo(s): n = int(s) if n==0: raise FooError('invalid value: %s' % s) return 10 / nfoo('0') 小结 Python内置的try…except…finally用来处理错误十分方便。出错时，会分析错误信息并定位错误发生的代码位置才是最关键的。 程序也可以主动抛出错误，让调用者来处理相应的错误。但是，应该在文档中写清楚可能会抛出哪些错误，以及错误产生的原因。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[面向对象高级编程之使用元类]]></title>
      <url>%2F2016%2F12%2F13%2F%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%85%83%E7%B1%BB%2F</url>
      <content type="text"><![CDATA[type() 动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。 比方说我们要定义一个Hello的class，就写一个hello.py模块： class Hello(object): def hello(self, name=’world’): print(‘Hello, %s.’ % name)当Python解释器载入hello模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个Hello的class对象，测试如下： 12345678&gt;&gt;&gt; from hello import Hello&gt;&gt;&gt; h = Hello()&gt;&gt;&gt; h.hello()Hello, world.&gt;&gt;&gt; print(type(Hello))&lt;class 'type'&gt;&gt;&gt;&gt; print(type(h))&lt;class 'hello.Hello'&gt; type()函数可以查看一个类型或变量的类型，Hello是一个class，它的类型就是type，而h是一个实例，它的类型就是class Hello。 我们说class的定义是运行时动态创建的，而创建class的方法就是使用type()函数。 type()函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过type()函数创建出Hello类，而无需通过class Hello(object)…的定义：1234567891011&gt;&gt;&gt; def fn(self, name='world'): # 先定义函数... print('Hello, %s.' % name)...&gt;&gt;&gt; Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class&gt;&gt;&gt; h = Hello()&gt;&gt;&gt; h.hello()Hello, world.&gt;&gt;&gt; print(type(Hello))&lt;class 'type'&gt;&gt;&gt;&gt; print(type(h))&lt;class '__main__.Hello'&gt; 要创建一个class对象，type()函数依次传入3个参数： class的名称；继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。 正常情况下，我们都用class Xxx…来定义类，但是，type()函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。 metaclass 除了使用type()动态创建类以外，要控制类的创建行为，还可以使用metaclass。 metaclass，直译为元类，简单的解释就是： 当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。 但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。 连接起来就是：先定义metaclass，就可以创建类，最后创建实例。 所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。 metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。正常情况下，你不会碰到需要使用metaclass的情况，所以，以下内容看不懂也没关系，因为基本上你不会用到。 我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个add方法： 定义ListMetaclass，按照默认习惯，metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass：12345# metaclass是类的模板，所以必须从`type`类型派生：class ListMetaclass(type): def __new__(cls, name, bases, attrs): attrs['add'] = lambda self, value: self.append(value) return type.__new__(cls, name, bases, attrs) 有了ListMetaclass，我们在定义类的时候还要指示使用ListMetaclass来定制类，传入关键字参数metaclass：12class MyList(list, metaclass=ListMetaclass): pass 当我们传入关键字参数metaclass时，魔术就生效了，它指示Python解释器在创建MyList时，要通过ListMetaclass.new()来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。 new()方法接收到的参数依次是： 当前准备创建的类的对象； 类的名字； 类继承的父类集合； 类的方法集合。 测试一下MyList是否可以调用add()方法： 1234&gt;&gt;&gt; L = MyList()&gt;&gt;&gt; L.add(1)&gt;&gt; L[1]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[面型对象高级编程之使用__slots__]]></title>
      <url>%2F2016%2F12%2F12%2F%E9%9D%A2%E5%9E%8B%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BD%BF%E7%94%A8__slots__%2F</url>
      <content type="text"><![CDATA[面型对象高级编程之使用 __slots____slots__1.为了给该实例绑定任何属性和方法 2.可以限制__slots__用于限制该类实例的属性与方法，不能限制类本身和继承类实例的属性与方法12345678910111213141516171819202122class Student(): # 用tuple定义允许绑定的属性名称 __slots__ = ('name','age') s = Student()#创建新实例 s.name = 'Name'#绑定属性 s.age = 'Age' #由于s没用方法到参数中，所以报错 #s.s = 's' #使用__slots__要注意，__slots__定义的属性仅对当前类实例起作用 # ，对继承的子类是不起作用的： class Man(Student): pass m = Man() #m新创建的属性 m.s = 'a' #子类调用并不起作用，报错 print(m.s,m.name) 除非在子类中也定义slots，这样，子类实例允许定义的属性就是自身的slots加上父类的slots。]]></content>
    </entry>

    
  
  
</search>
